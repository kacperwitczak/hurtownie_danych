using Bogus;
using Microsoft.EntityFrameworkCore;
using MyConsoleApp.Data;
using MyConsoleApp.Models;
using EFCore.BulkExtensions;
using System.Collections.Concurrent;
using System.Threading;

public class DataGeneratorService
{
    private readonly string _connectionString;
    private readonly int n = 10;

    public DataGeneratorService(string connectionString)
    {
        _connectionString = connectionString;
    }

    public async Task Seed()
    {
        Console.WriteLine("Seeding database...");
        using (var context = new ApplicationDbContext(_connectionString))
        {
            try
            {
                Console.WriteLine("Clearing database...");
                await context.Database.EnsureDeletedAsync();
                Console.WriteLine("Database cleared.");
                Console.WriteLine("Creating db...");
                await context.Database.EnsureCreatedAsync();
                Console.WriteLine("Db created.");
                await SeedTypGry();
                await SeedTypTransakcji();
                await SeedKrupierzy(n);
                await SeedLokalizacje(n);
                await SeedStoly(n);
                await SeedUstawienieStolu(n);
                await SeedRozgrywki();
                await SeedTransakcje();
                Console.WriteLine("Data seeded successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error seeding data: {ex.Message}");
            }
        }
    }

    public async Task ClearDatabase()
    {
        Console.WriteLine("Clearing database...");
        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.Database.ExecuteSqlRawAsync("DELETE FROM Transakcje");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM Rozgrywki");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM UstawienieStolu");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM Stoly");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM Lokalizacje");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM Krupierzy");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM TypTransakcji");
            await context.Database.ExecuteSqlRawAsync("DELETE FROM TypGry");
            Console.WriteLine("Database cleared.");
        }
    }

    public async Task SeedTypGry()
    {
        Console.WriteLine("Seeding TypGry...");
        var typyGier = new List<TypGry>
        {
            new TypGry { NazwaGry = "Poker" },
            new TypGry { NazwaGry = "Blackjack" },
            new TypGry { NazwaGry = "Ruletka" },
            new TypGry { NazwaGry = "Bakarat" },
            new TypGry { NazwaGry = "Keno" },
            new TypGry { NazwaGry = "Kostka" },
            new TypGry { NazwaGry = "Kosci" },
            new TypGry { NazwaGry = "Bingo" }
        };

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(typyGier);
        }
        Console.WriteLine($"Added {typyGier.Count} TypGry entries.");
    }

    public async Task SeedTypTransakcji()
    {
        Console.WriteLine("Seeding TypTransakcji...");
        var typyTransakcji = new List<TypTransakcji>
        {
            new TypTransakcji { Typ = "Wplata" },
            new TypTransakcji { Typ = "Wyplata" }
        };

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(typyTransakcji);
        }
        Console.WriteLine($"Added {typyTransakcji.Count} TypTransakcji entries.");
    }

    public async Task SeedKrupierzy(int n)
    {
        Console.WriteLine("Seeding Krupierzy...");
        var fakerKrupierzy = new Faker<Krupierzy>()
            .RuleFor(k => k.Imie, f => f.Person.FirstName)
            .RuleFor(k => k.Nazwisko, f => f.Person.LastName)
            .RuleFor(k => k.Pesel, f => long.Parse(f.Random.ReplaceNumbers("###########")))
            .RuleFor(k => k.PoczatekPracy, f => f.Date.Past(1));

        var krupierzy = new List<Krupierzy>();

        for (int i = 0; i < n * n * n; i++)
        {
            krupierzy.Add(fakerKrupierzy.Generate());
        }

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(krupierzy);
        }
        Console.WriteLine($"Added {krupierzy.Count} Krupierzy entries.");
    }

    public async Task SeedLokalizacje(int n)
    {
        Console.WriteLine("Seeding Lokalizacje...");
        var lokalizacje = new List<Lokalizacje>();

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                for (int k = 0; k < n; k++)
                {
                    lokalizacje.Add(new Lokalizacje
                    {
                        Pietro = (short)i,
                        Rzad = (short)j,
                        Kolumna = (short)k
                    });
                }
            }
        }

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(lokalizacje);
        }
        Console.WriteLine($"Added {lokalizacje.Count} Lokalizacje entries.");
    }

    public async Task SeedStoly(int n)
    {
        Console.WriteLine("Seeding Stoly...");
        List<TypGry> typyGier;

        using (var context = new ApplicationDbContext(_connectionString))
        {
            typyGier = await context.TypGry.ToListAsync();
        }

        var fakerStoly = new Faker<Stoly>()
            .RuleFor(s => s.MaksymalnaStawka, f => f.Random.Number(1, 100))
            .RuleFor(s => s.MinimalnaStawka, f => f.Random.Number(100, 1000))
            .RuleFor(s => s.LiczbaMiejsc, f => (short)f.Random.Number(1, 10))
            .RuleFor(s => s.TypGry, f => f.PickRandom(typyGier));

        var stoly = new List<Stoly>();

        for (int i = 0; i < n * n * n; i++)
        {
            stoly.Add(fakerStoly.Generate());
        }

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(stoly);
        }
        Console.WriteLine($"Added {stoly.Count} Stoly entries.");
    }

    public async Task SeedUstawienieStolu(int n)
    {
        Console.WriteLine("Seeding UstawienieStolu...");

        List<Stoly> stolyList;
        List<Lokalizacje> lokalizacjeList;

        using (var context = new ApplicationDbContext(_connectionString))
        {
            stolyList = await context.Stoly.ToListAsync();
            lokalizacjeList = await context.Lokalizacje.ToListAsync();
        }

        var ustawienia = new List<UstawienieStolu>();
        var months2024 = GetFirstAndLastDaysOfMonths(2024);

        foreach (var month in months2024)
        {
            var offset = month.LastDay.Month;

            for (int i = 0; i < n * n * n; i++)
            {
                var ustawienieStolu = new UstawienieStolu
                {
                    DataStart = month.FirstDay,
                    DataKoniec = month.LastDay,
                    Stoly = stolyList[(i * offset) % stolyList.Count],
                    Lokalizacje = lokalizacjeList[(i * offset) % lokalizacjeList.Count]
                };

                ustawienia.Add(ustawienieStolu);
            }
        }

        using (var context = new ApplicationDbContext(_connectionString))
        {
            await context.BulkInsertAsync(ustawienia);
        }
        Console.WriteLine($"Added {ustawienia.Count} UstawienieStolu entries.");
    }

    public async Task SeedRozgrywki()
    {
        Console.WriteLine("Seeding Rozgrywki...");

        List<UstawienieStolu> ustawieniaStolu;
        List<Krupierzy> krupierzy;

        using (var context = new ApplicationDbContext(_connectionString))
        {
            ustawieniaStolu = await context.UstawienieStolu.ToListAsync();
            krupierzy = await context.Krupierzy.ToListAsync();
        }

        var batchSize = 1000;
        var batchCount = (ustawieniaStolu.Count + batchSize - 1) / batchSize;

        var totalRozgrywkiCount = 0;

        for (int batchIndex = 0; batchIndex < batchCount; batchIndex++)
        {
            var batchUstawienia = ustawieniaStolu.Skip(batchIndex * batchSize).Take(batchSize);

            var rozgrywkiBatch = new List<Rozgrywki>();

            var threadLocalRandom = new ThreadLocal<Random>(() => new Random());

            foreach (var ustawienie in batchUstawienia)
            {
                var random = threadLocalRandom.Value;

                var startDate = ustawienie.DataStart;
                var endDate = ustawienie.DataKoniec.Value;

                for (var day = startDate; day <= endDate; day = day.AddDays(1))
                {
                    for (int i = 0; i < 10; i++)
                    {
                        var rozgrywkaStart = day.AddHours(8 + i);
                        var rozgrywkaEnd = rozgrywkaStart.AddMinutes(random.Next(1, 60));

                        var rozgrywka = new Rozgrywki
                        {
                            DataStart = rozgrywkaStart,
                            DataKoniec = rozgrywkaEnd,
                            UstawienieStolu = ustawienie,
                            Krupier = krupierzy[random.Next(krupierzy.Count)]
                        };

                        rozgrywkiBatch.Add(rozgrywka);
                    }
                }
            }

            using (var context = new ApplicationDbContext(_connectionString))
            {
                await context.BulkInsertAsync(rozgrywkiBatch);
            }

            totalRozgrywkiCount += rozgrywkiBatch.Count;

            Console.WriteLine($"Inserted batch {batchIndex + 1}/{batchCount} of Rozgrywki.");
        }

        Console.WriteLine($"Added {totalRozgrywkiCount} Rozgrywki entries.");
    }

    public async Task SeedTransakcje()
    {
        Console.WriteLine("Seeding Transakcje...");

        List<TypTransakcji> typyTransakcji;
        List<Rozgrywki> rozgrywki;

        using (var context = new ApplicationDbContext(_connectionString))
        {
            typyTransakcji = await context.TypTransakcji.ToListAsync();
            rozgrywki = await context.Rozgrywki.ToListAsync();
        }

        var batchSize = 1000;
        var batchCount = (rozgrywki.Count + batchSize - 1) / batchSize;

        var totalTransakcjeCount = 0;

        for (int batchIndex = 0; batchIndex < batchCount; batchIndex++)
        {
            var batchRozgrywki = rozgrywki.Skip(batchIndex * batchSize).Take(batchSize);

            var transakcjeBatch = new List<Transakcje>();

            var threadLocalRandom = new ThreadLocal<Random>(() => new Random());

            foreach (var rozgrywka in batchRozgrywki)
            {
                var random = threadLocalRandom.Value;

                for (int i = 0; i < 10; i++)
                {
                    var transakcja = new Transakcje
                    {
                        TypTransakcji = typyTransakcji[random.Next(typyTransakcji.Count)],
                        Rozgrywki = rozgrywka,
                        Kwota = (decimal)(random.NextDouble() * 999 + 1)
                    };

                    transakcjeBatch.Add(transakcja);
                }
            }

            using (var context = new ApplicationDbContext(_connectionString))
            {
                await context.BulkInsertAsync(transakcjeBatch);
            }

            totalTransakcjeCount += transakcjeBatch.Count;

            Console.WriteLine($"Inserted batch {batchIndex + 1}/{batchCount} of Transakcje.");
        }

        Console.WriteLine($"Added {totalTransakcjeCount} Transakcje entries.");
    }

    public static List<(DateTime FirstDay, DateTime LastDay)> GetFirstAndLastDaysOfMonths(int year)
    {
        var monthDays = new List<(DateTime FirstDay, DateTime LastDay)>();

        for (int month = 1; month <= 12; month++)
        {
            DateTime firstDay = new DateTime(year, month, 1);
            DateTime lastDay = new DateTime(year, month, DateTime.DaysInMonth(year, month));

            monthDays.Add((firstDay, lastDay));
        }

        return monthDays;
    }
}
